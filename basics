let abs x =
  if x >= 0 then x
  else (-x)

(***********************************)
(* Part 1: Non-Recursive Functions *)
(***********************************)

let rev_tup (tup : ('a * 'b)) =
match tup with 
| (a, b) -> (b, a)
;;

let rev_triple (tup : 'a * 'b * 'c) = 
match tup with
| (a, b, c) -> (c, b, a)
;;

let is_odd x = 
x mod 2 = 1
;;

let is_older (date1: int * int * int) (date2: int * int * int) = 
match date1, date2 with
  | (year1, month1, day1), (year2, month2, day2) ->
    year1 < year2 ||
    (year1 = year2 && month1 < month2) ||
    (year1 = year2 && month1 = month2 && day1 < day2)
;;


let to_us_format (date1: int * int * int) = 
match date1 with
  | (year, month, day) -> (month, day, year)
;;
(*******************************)
(* Part 2: Recursive Functions *)
(*******************************)

let rec pow x p = 
if p = 0 then 1
  else x * pow x (p - 1)
;;

let rec fac n = 
 if n = 1 then 1
  else n * fac (n - 1)
;;

(*****************)
(* Part 3: Lists *)
(*****************)

let rec get_nth ((idx:int), (lst: 'a list)) =
  let rec get_nth_helper (idx : int) (lst : 'a list) =
    match lst with
    | [] -> failwith "Index out of bounds"
    | head :: tail ->
      if idx = 0 then head
      else get_nth_helper (idx - 1) tail
  in
  match lst with
  | [] -> failwith "Index out of bounds"
  | head :: tail ->
    if idx = 0 then head
    else get_nth_helper (idx - 1) tail
;;

let larger lst1 lst2 =
  let len1 = List.length lst1 in
  let len2 = List.length lst2 in
  if len1 > len2 then lst1
  else if len2 > len1 then lst2
  else [] 
;;

let rec sum lst1 lst2 =
  match lst1, lst2 with
  | [], [] -> 0
  | [], lst2 -> List.fold_left (+) 0 lst2
  | lst1, [] -> List.fold_left (+) 0 lst1
  | x :: xs, y :: ys -> x + y + sum xs ys
;;
